'''
### TO DO

did i use valid up to?

can i write get_primes so it tests new top vs existing top?

'''

### FUNCTIONS
def get_primes(top = 10 ** 6):
    print("Loading primes... \n")

    # calculate square root
    stop = pow(top, 1/2)

    # convert square root to integer
    stop = int(stop)

    # list numbers
    prime_lookup = [True for i in range(top + 1)]
    prime_lookup[0] = False
    prime_lookup[1] = False

    
    # initialize list for prime factor
    factor_list = [[] for i in range(top + 1)]

    # removes multiples of 2
    j = 2 + 2
    while j <= top:
        factor_list[j].append(2)
        prime_lookup[j] = False
        j += 2

    # remove multiples of 3
    j = 3 + 3
    while j <= top:
        factor_list[j].append(3)
        prime_lookup[j] = False
        j += 3

    # remove multiples up to square root
    for k in range(6, stop + 1, 6):
        a = k - 1
        if prime_lookup[a]:
            j = a + a
            while j <= top:
                factor_list[j].append(a)
                prime_lookup[j] = False
                j += a

        b = k + 1
        if prime_lookup[b]:
            j = b + b
            while j <= top:
                factor_list[j].append(b)
                prime_lookup[j] = False
                j += b

    prime_list = []
    for i in range(top + 1):
        if prime_lookup[i]:
            factor_list[i] = [i]
            prime_list.append(i)


    print(len(prime_list), "primes below", top, "\n")

    return prime_lookup, prime_list, factor_list

def is_prime(n):

    assert n <= prime_list[-1] ** 2
    
    if n <= 1:
        result = False
    
    elif n <= len(prime_list):
        result = prime_lookup[n]
    
    else:
        stop = pow(n, 1/2)
        
        result = True

        for prime in prime_list:
            if prime > stop:
                break
            
            if n % prime == 0:
                result = False
                break
            
    return result

def get_prime_factors(top = 10 ** 6):
    print("Loading prime factors... \n")
          
    factor_lookup = [{} for i in range(top + 1)]
    
    for i in range(2, top + 1):
        n = i
        for f in factor_list[i]:
            e = 0
            while n % f == 0:
                n = n // f
                e += 1
                
            factor_lookup[i][f] = e

        if n != 1:
            factor_list[i].append(n)
            factor_lookup[i][n] = 1

    print("I know kung fu! \n")

    return factor_lookup

def get_number(x):
    assert x <= prime_list[-1] ** 2
    
    assert x > 0

    n = 1
    factors = list_factors(x)
    for f in factors:
        e = factors[f]
        n *= f ** e

    return n

def list_factors(n, i = 0):
    assert n <= prime_list[-1] ** 2
    
    assert n > 0

    stop = pow(n, 1/2)
    f = prime_list[i]

    if n < len(factor_lookup):
        result = factor_lookup[n]

    else:
        e = 0
        while True:
            while n % f == 0:
                n = n // f
                e += 1

            if e > 0:
                break

            elif f > stop:
                break
                
            else:
                i += 1
                f = prime_list[i]

        if f > stop:
            result = {n: 1}

        else:
            result = list_factors(n, i + 1)
            
            try:
                result[f] += e

            except:
                result[f] = e

    return result.copy()


### MAIN
prime_lookup, prime_list, factor_list = get_primes()

factor_lookup = get_factors()









        
                

        
        
    


